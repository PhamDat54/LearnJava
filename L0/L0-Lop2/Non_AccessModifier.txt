* Non-Access Modifier thay đổi thuộc tính clas và các biến, phương thức của class đó.
* Trong Java chúng ta có những non-access modifier sau:
    - abstract
    - static: Static Modifier trong Java được sử dụng để tạo các phương thức class và biến class
    - final
    - synchronized
    - native
    - strictfp
    - transient
    - volatile

 1. Static Modifier
    * Biến static
        - Từ khoá "static" được dùng để tạo các biến tồn tại đọc lập trong bất kỳ instance được tạo cho class đó.
          chỉ có 1 bản sao biến "static" cho fuf có nhiều instance của lớp.
        - Các biến static cũng được biết đến như các biến class. Các biến local không thể được khai báo là static.
    * Phương thức static
        - Static được dùng để tạo các phương thức mà sẽ tồn tại một cách độc lập trong bất kỳ 1 instance được tạo cho class đó
        - Các phương thức static không sử dụng bất kỳ biến instance nào của bất cứ đối tượng trong class mà chung đ/.
        - Các phương thức static nhận tất cả dữ liệu từ các tham số và tính toán mọi thứ từ các tham số của chung, mà không tham chiếu tới các biến.
        - Các biến class và các phương thức class có thể được truy cập bởi tên lớp được theo sau bởi một dấu chấm và tên
          biến hoặc phương thức.
2. Final Modifier
    *Biến final trong Java
        - Một biến final có thể được khởi tạo một cách rõ ràng chỉ một lần. Một biến tham chiều được khai báo final
          có thể không bao giờ được tái gán để tham chiếu tới một đối tượng khác
        - Dữ liệu bên trong đối tượng có thể bị thay đổi nên trạng thái của đối tượng có thể thay đổi, nhưng không
          phải là tham chiếu.
        - Các biến Final Modifier thường được sử dụng với static để tạo một hằng số cho một biến class.

    *Phương thức final trong
        - Một phương thức final không thể bị ghi đè phương thức(method override) bởi bất kì lớp phụ nào, final modifier
          ngăn cản một phương thức bị sử đổi trong một lớp phụ.
        - Mục đích chính của việc tạo phương thức final sẽ là: nội dung của phương thức không nên bị thay đổi bởi bên ngoài.
    * Class final trong Java
        - Mục đích chính của việc sử dụng một lớp được khai báo final là để ngăn cản lớp bị phân lớp thành lớp phụ. Nếu
          một lớp được đánh dấu là final thì không có lớp nào có thể kế thừ bất kỳ đặc điểm nào từ lớp final đó.

3. Abstract Modifier
    *Lớp abstract trong java
        - Một lớp abstract có thể kkhong bao giờ được khởi tạo. Nếu class được khai báo là abstract thì mục đích
            duy nhất cho class này là để được kế thừa.
        - Mốt class không thể vừa abstract và final(final không thể kế thừa). Nếu class chứa các phương thức abstract
            thì class đó nên được khai báo abstract. Nếu không, nó sẽ ném một compile eror.
        - Một class abstract có thể chứa cả các phương thức abstract cũng như các phương thức thông thường.
    *Phương thức abstract trong Java
        - Một phương thức abstract là 1 phương thức được khai báo mà không có bất kỳ sự triển khai nào. Thân phương
            thức này được cung cấp bỏi lớp phụ. Các phương thức abstract có thể không bao giờ là final.
        - Bất kỳ lớp nào kế thừa một lớp abstract phải triển khai tất cả phương thức abstract của lớp cha, trừ khi
            lớp phụ này cũng là 1 class abstract
        -Nếu một lớp chứa một hoặc nhiều phương thức abstract, thì lớp đó phải được khai báo là abstract. Một class
            abstract không cần chứa các phương thức abstract.
        - Phương thức abstract kết thức với 1 dấu chấm phẩy(;)    Ví dụ: public abstract sample();

4. Synchronizd Modifier trong Java
    - Được dùng để chỉ rằng một phương thức có thể được truy cập bởi chỉ 1 thread tại 1 thời điểm. Có thể áp dụng
        bất kì 1 trong 4 mức Access Modifier nào.

5. Transient Modifier trong Java
    - Một biến instance được đánh dấu là transident để chỉ rằng JVM bỏ qua biến cụ thể khi xếp thứ tự đối tượng đang chứa nó.
    - Modifier này được bao trong lệnh mà tạo biến đó, đứng trước class hoặc kiểu dữ liệu của biến đó.

6. Volatile Modifier trong Java
    - Được sử dụng để chỉ cho JVM biết rằng 1 luồng thread đang truy cập biến đó phải luôn sáp nhập bản sao biến
        private của riêng nó với bản sao master trong bộ nhớ.
    - Truy cập 1 biến volatile đồng bộ tất cả bản sao của các biến trong bộ nhớ chính. Volatile chỉ có thể được áp
        dụng tới các biến instance, mà là kiểu đối tượng hoặc private. Một tham chiếu đối tượng Volatile có thể là null.

