1. Mảng (Array)
    - Mảng(array) là một tập hợp các phần tử có cùng kiểu được lưu trữ gần nhau trong bộ nhớ.
    - Mảng trong java là một đối tượng chứa các phần tử có kiểu dữ liệu giống nhau, một cấu trức dữ liệu
      nơi lưu trữ giống nhau.
    - Với mảng trong java, ta chỉ có thể lưu trữ một tập các phần tử có số lượng phần tử cố định.
    - Mảng trong java lưu các phần tử theo chỉ số, chỉ số của phần tử đầu tiên là 0.
    - Có 2 kiểu mảng:
        + Mảng 1 chiều
        + Mảng đa chiều

2. Tạo mảng
 Cú pháp:
        Kiểu_dữ_liêu[] arr;
        Kiểu_dữ_liêu []arr;
        Kiểu_dữ_liêu arr[];
    - Để chèn giá trị vào mảng, ta có thể sử dụng một mảng bằng chữ - đặt các giá trị trong
    danh sách được phân tách bằng dấu phẩy, bên trong dấu ngoặc nhọn:
    VD: String[] cars = {"Honda","BMW","Ford", "Mazda"};
    - Để tạo 1 mảng số nguyên, bạn có thể viết
        int[] myNum = {10, 20, 30, 40};

3. Truy cập phần tử trong mảng
    - Bạn truy cập 1 phần tử mảng bằng cách sử dụng số chỉ mục (index).
    VD:
    public class TruyCapArray1{
        public static void main(String[] args){
            String[] cars = {"Honda", "BMW", "Ford", "Mazda" }:
            System.out.println(cars[0]);
            }
    }

4. Thay đổi phần tử trong mảng.
    - Để thay đổi giá trị của một phần tử cụ thể, hãy sử dụng số chỉ mục.
    VD:
        public class TruyCapArray2 {
            public static void main(String[] args) {
                String[] cars = { "Honda", "BMW", "Ford", "Mazda" };
                // thay đổi phần tử đầu tiên của mảng cars
                cars[0] = "Morning";
                // hiển thị phần tử đầu tiên của mảng cars
                System.out.println("Phần tử đầu tiên: " + cars[0]);
            }
        }

5. Đổ dài của mảng
    - Để biết có bao nhiêu phần tử một mảng, sử dụng thuộc tính length.
    VD:
        public class DodaiArray1 {
            public static void main(String[] args) {
                String[] cars = { "Honda", "BMW", "Ford", "Mazda" };
                System.out.println("Độ dài của mảng cars là: " + cars.length);
            }
        }
6. Duyệt các phần tử trong mảng.
    - Có 2 cách để duyệt các phần tử của mảng:
        + Sử dụng vòng lặp for
        + Sử dụng foreach
    - Sử dụng for:
        + Bạn có thể lặp qua các phần tử mảng bằng vòng lặp for
          và sử dụng thuộc tính length để chỉ định số lần vòng lặp sẽ chạy.
        VD:
           public class DuyetArray1 {
               public static void main(String[] args) {
                   String[] cars = { "Honda", "BMW", "Ford", "Mazda" };
                   for (int i = 0; i < cars.length; i++) {
                       System.out.println(cars[i]);
                   }
               }
           }

    - Sử dụng foreach:
        VD:
            public class DuyetArray2 {
                public static void main(String[] args) {
                    String[] cars = { "Honda", "BMW", "Ford", "Mazda" };
                    for (String car : cars) {
                        System.out.println(car);
                    }
                }
            }

    - So sánh for với foreach
    Nếu bạn so sánh vòng lặp for và vòng lặp foreach, bạn sẽ thấy rằng phương thức
    foreach dễ viết hơn, nó không yêu cầu bộ đếm (sử dụng thuộc tính length) và nó dễ đọc hơn.
7. Sắp xếp mảng.
    - Có nhiều phương thức mảng có sẵn, ví dụ Sort(), sắp xếp một mảng theo thứ tự bảng chữ cái
      hoặc theo thứ tự tăng dần.
    VD:
       public class DuyetArray2 {
           public static void main(String[] args) {
               String[] cars = { "Honda", "BMW", "Ford", "Mazda" };
               // sap xep mảng cars theo thu tu tang dan
               Arrays.sort(cars);
               System.out.println("Mảng cars sau khi được sắp xếp:");
               for (String car : cars) {
                   System.out.println(car);
               }
           }
       }
8. Các cách tạo mảng khác.
    - Có nhiều cách khác nhau để tạo một mảng:
        // tạo một mảng có độ dài 4, thêm các phần tử sau tạo
        String[] cars1 = new String[4];

        // tạo một mảng không cần chỉ định số phần tử cụ thể
        String[] cars2 = new String[] { "Honda", "BMW", "Ford", "Mazda" };

        // tạo một mảng không cần chỉ định số phần tử cụ thể
        // và không cần dùng từ khóa new
        String[] cars3 = { "Honda", "BMW", "Ford", "Mazda" };

    - Một trường hợp khác, nếu bạn khai báo một mảng và khởi tạo nó sau, bạn phải sử dụng
      từ khóa new:
      VD:
        // khai báo một mảng
        String[] cars;

        // thêm giá trị, sử dụng từ khóa new
        cars = new String[] { "Honda", "BMW", "Ford" };

        // nếu không dùng new sẽ bị lỗi
        cars = {"Honda","BMW","Ford"};

10. Truyền mảng vào phương thức.
    - Chúng ta có thể truyền mảng vào phương thức, điều này giúp tái sử dụng code logic để
      xử lý mảng bất kỳ.
      VD:
        public class TestArray2 {
            static void min(int arr[]) {
                int min = arr[0];
                for (int i = 1; i < arr.length; i++)
                    if (min > arr[i]) {
                        min = arr[i];
                    }
                System.out.println(min);
            }

            public static void main(String args[]) {
                int a[] = { 33, 3, 4, 5 };
                min(a);// truyền mảng tới phương thức
            }
        }

11. Sao chép một mảng
    - Ta có thể sao chép một mảng tới mảng khác bởi phương thức arraycopy của lớp System.
      Cú pháp của phương thức arraycopy.
      VD:
        public class TestArrayCopyDemo {
            public static void main(String[] args) {
                char[] copyFrom = { 'd', 'e', 'c', 'a', 'f',
                        'f', 'e', 'i', 'n', 'a', 't', 'e', 'd' };
                char[] copyTo = new char[7];

                System.arraycopy(copyFrom, 2, copyTo, 0, 7);
                System.out.println(new String(copyTo));
            }
        }

12. Mảng hai chiều và đa chiều
    - Trong trường hợp này, dữ liệu được lưu trữ theo hàng và cột theo chỉ mục (hay còn gọi là dạng ma trận).
    * Khai báo:
        dataType[][] arr;
        dataType [][]arr;
        dataType arr[][];
        dataType []arr[];
    * Ví dụ về khởi tạo và gán giá trị cho mảng đa chiều
        int[][] arr=new int[3][3]; // 3 hàng 3 cột
        arr[0][0]=1;
        arr[0][1]=2;
        arr[0][2]=3;
        arr[1][0]=4;
        arr[1][1]=5;
        arr[1][2]=6;
        arr[2][0]=7;
        arr[2][1]=8;
        arr[2][2]=9;

    * Ví dụ khai báo và khởi tạo mảng đa chiều trong java
        public class TestArray3 {
            public static void main(String args[]) {

                // khai báo và khởi tạo mảng 2 chiều
                int arr[][] = { { 1, 2, 3 }, { 2, 4, 5 }, { 4, 4, 5 } };

                // in mảng 2 chiều r màn hình
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
                        System.out.print(arr[i][j] + " ");
                    }
                    System.out.println();
                }

            }
        }
    * Ví dụ cộng 2 ma trận (mảng đa chiều) trong Java
        public class CongMaTran {
            public static void main(String[] args) {
                // tao hai ma tran
                int a[][] = { { 1, 3, 4 }, { 3, 4, 5 } };
                int b[][] = { { 1, 3, 4 }, { 3, 4, 5 } };

                // tao ma tran khac de luu giu ket qua phep cong hai ma tran
                int c[][] = new int[2][3];

                // cong va in tong hai ma tran
                for (int i = 0; i < 2; i++) {
                    for (int j = 0; j < 3; j++) {
                        c[i][j] = a[i][j] + b[i][j];
                        System.out.print(c[i][j] + " ");
                    }
                    System.out.println();
                }
            }
        }
13. Lợi thế và hạn chế của mảng trong java
    * Lợi thế:
        - Tối ưu code: Mảng giúp lấy hoặc sắp xếp dữ liệu dễ dàng.
        - truy cập ngẫu nhiên: Chúng ta có thể lấy dữ liệu được lưu trữ ở bất kỳ vị trí nào thông qua chỉ số.
    * Hạn chế:
        - Giới hạn kích thước: Ta phải khởi tạo kích thước của mảng trong java trước khi sử dụng. Không thể thay
         đổi được kích thước của nó lúc runtime. Collection framework được sử dụng trong java để giải quyết
         vấn đề này.

14. Giới thiệu lớp Array trong Java
    - Lớp java.util.Array chứa nhiều phương thức static đa dạng để xếp xếp thứ tự và tìm kiếm các mảng, so sánh
        và điền các phần tử vào các mảng

    *public static int binarySearch(Object[] a, Object key)
        - Tìm kiếm mảng của Object(byte, int, double,...) đã cho với giá trị đã xác định bởi sử dụng thuật toán
            tìm kiếm nhị phân. Mảng này phải được xếp thứ tự trước khi gọi phương thức này. Nó trả về chỉ mục của
            từ khoá tìm kiếm, nếu nó nằm trong d/s, nếu không thì, bằng(-(điểm chèn + 1)).

    *public static boolean equals(long[] a, long[] a2)
        - Trả về true nếu hai mảng "long" đã cho cân bằng nhau. Hai mảng này được cho là cân bằng nếu cả hai mảng
        chứ cùng số lượng phần từ, và tất cả các cặp phần tử tương ứng của hai mảng là cần bằng. Phương thức tương
        tự có thể được sử dụng bởi tất cả kiểu dữ liệu gốc khác(byte, short, int,...).

    *public static void fill(int[] a, int val)
        - Gán giá trị int đã cho tới mỗi phần tử của mảng int đã cho. Phương thức tương tự có thể được sử dụng bởi
        tất cả kiểu dữ liệu gốc khác(byte, short, int,...).

    *public static void sort(Object[] a)
        - Xếp thứ tự mảng các đối tượng đã cho theo thứ tự tăng dần, theo thứ tự tự nhiên của các phần tử. Phương
        thức tương tự có thể sử dụng được bởi tất cả kiểu dữ liệu gốc khác(byte, short, int,...)


